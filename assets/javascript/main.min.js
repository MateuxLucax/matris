const numbers=["1","2","3","4","5","6","7","8","9","0"],comparisons=["!=",">","<",">=","<="],blocks=[...numbers,...comparisons];function isNumber(t){return numbers.includes(t)}function isComparison(t){return comparisons.includes(t)}function getType(t){return isNumber(t)?"number":isComparison(t)?"comparison":" "==t?"empty":"invalid"}function randomBalancedBlock(t){0==t.comparisons&&(t.comparisons=1),0==t.numbers&&(t.numbers=1);const e=t.numbers/t.comparisons;return randomElement(e>5?comparisons:e<.2?numbers:blocks)}const operatorFunction={">":(t,e)=>t>e,"<":(t,e)=>t<e,">=":(t,e)=>t>=e,"<=":(t,e)=>t<=e,"=":(t,e)=>t==e,"!=":(t,e)=>t!=e};function isTrueExpression(t,e,i){return!!(isNumber(t)&&isComparison(e)&&isNumber(i))&&operatorFunction[e](Number(t),Number(i))}const directionToXOffset={ArrowLeft:-1,ArrowRight:1,ArrowDown:0};class Game{constructor(t,e){this.matrix=new Matrix(t,e),this.playerBlock={x:null,y:null},this.score=0,this.gameOverModalShown=!1}isPlayerBlockSettled(){if(0==this.playerBlock.y)return!0;const t={y:this.playerBlock.y-1,x:this.playerBlock.x};return!this.matrix.isAvailable(t)}isGameOver(){const t=this.matrix.height-1;for(let e=0;e<this.matrix.width;e++){if(!this.matrix.isAvailable({x:e,y:t})&&!this.matrix.isAvailable({x:e,y:t-1}))return!0}return!1}blockTypeCount(){let t={numbers:0,comparisons:0},e={y:null,x:null};for(e.y=0;e.y<this.matrix.height;e.y++)for(e.x=0;e.x<this.matrix.width;e.x++){const i=getType(this.matrix.getBlock(e));"number"==i?t.numbers++:"comparison"==i&&t.comparisons++}return t}createNewPlayerBlock(){this.playerBlock={y:this.matrix.height-1,x:randomIntBetween(0,this.matrix.width)},this.matrix.setBlock(this.playerBlock,randomBalancedBlock(this.blockTypeCount()))}updatePlayerBlock(t){const e=directionToXOffset[t];let i,r,o,s,a;o={y:(r={y:this.playerBlock.y,x:this.playerBlock.x}).y-1,x:r.x},a={y:(s={y:r.y,x:r.x+e}).y-1,x:s.x},i=this.matrix.isAvailable(a)?a:this.matrix.isAvailable(s)?s:this.matrix.isAvailable(o)?o:r,this.playerBlock=this.matrix.moveBlock(this.playerBlock,i)}start(){this.createNewPlayerBlock()}update(t){this.isGameOver()||(this.updatePlayerBlock(t),!this.isGameOver()&&this.isPlayerBlockSettled()&&(this.updateScore(),this.createNewPlayerBlock()))}makeBlocksFall(){let t={y:null,x:null};for(t.y=0;t.y<this.matrix.height-1;t.y++)for(t.x=0;t.x<this.matrix.width;t.x++)if(" "==this.matrix.getBlock(t)){const e={y:t.y+1,x:t.x};this.matrix.moveBlock(e,t)}}updateScore(){let t,e,i,r,o,s,a=0,n=0,l=this.matrix.copy();for(let n=0;n<l.height;n++)for(let c=1;c<l.width-1;c++)t={y:n,x:c-1},e={y:n,x:c},i={y:n,x:c+1},isTrueExpression(r=l.getBlock(t),o=l.getBlock(e),s=l.getBlock(i))&&(this.matrix.setBlock(t," "),this.matrix.setBlock(e," "),this.matrix.setBlock(i," "),a++);for(let a=1;a<l.height-1;a++)for(let c=0;c<l.width;c++)t={y:a+1,x:c},e={y:a,x:c},i={y:a-1,x:c},isTrueExpression(r=l.getBlock(t),o=l.getBlock(e),s=l.getBlock(i))&&(this.matrix.setBlock(t," "),this.matrix.setBlock(e," "),this.matrix.setBlock(i," "),n++);this.score+=1*a+2*n,(a>0||n>0)&&(this.makeBlocksFall(),this.updateScore())}showGameOverModal(){const t=`<div id="game-over-modal" class="modal">\n                      <div class="modal__container">\n                        <h2>Game over!</h2>\n                        <p>${this.score>0?`Você fez ${this.score} pontos`:"Você não pontuou"}</p>\n                        <button type="button" title="Jogar novamente!" onclick="window.location.reload();">Jogar novamente!</button>\n                      </div>\n                    </div>`;document.body.insertAdjacentHTML("beforeend",t),this.gameOverModalShown=!0}HTMLrendering(){let t,e,i="";i+='<table id="game-table">',i+=`<caption id ="game-score">Pontuação: ${this.score}</caption>`;for(let r=this.matrix.height-1;r>=0;r--){e=r==this.matrix.height-1?"danger":"",i+='<tr class="game-row">';for(let o=0;o<this.matrix.width;o++)i+=`<td class="game-cell ${e} ${getType(t=this.matrix.getBlock({y:r,x:o}))}">`,i+=t,i+="</td>";i+="</tr>"}return i+="</table>",this.isGameOver()&&!1===this.gameOverModalShown&&(this.showGameOverModal(),addScore(this.score)),i}}function randomIntBetween(t,e){return Math.floor(t+Math.random()*(e-t))}function randomElement(t){return t[randomIntBetween(0,t.length)]}class Matrix{constructor(t,e){this.height=t,this.width=e,this.matrix=null,this.initializeMatrix()}copy(){let t=new Matrix(this.height,this.width),e={y:null,x:null};for(e.y=0;e.y<t.height;e.y++)for(e.x=0;e.x<t.width;e.x++)t.setBlock(e,this.getBlock(e));return t}initializeMatrix(){this.matrix=new Array(this.height);for(let t=0;t<this.height;t++){this.matrix[t]=new Array(this.width);for(let e=0;e<this.width;e++)this.matrix[t][e]=" "}}isValid(t){return t.x>=0&&t.x<this.width&&t.y>=0&&t.y<this.height}getBlock(t){if(this.isValid(t))return this.matrix[t.y][t.x]}isAvailable(t){return" "==this.getBlock(t)}setBlock(t,e){this.isValid(t)&&(this.matrix[t.y][t.x]=e)}moveBlock(t,e){return this.isValid(t)&&this.isAvailable(e)?(this.setBlock(e,this.getBlock(t)),this.setBlock(t," "),e):t}HTMLrendering(){let t,e="";e+='<table id="game-matrix-table">';for(let i=this.height-1;i>=0;i--){e+='<tr class="game-matrix-row">';for(let r=0;r<this.width;r++)e+=`<td class="game-matrix-cell ${getType(t=this.getBlock({y:i,x:r}))}">`,e+=t,e+="</td>";e+="</tr>"}return e+="</table>"}}let rankingScores=JSON.parse(localStorage.getItem("ranking_scores"))||[];function addScore(t){t>0&&(rankingScores.push(t),rankingScores.sort(),saveToStorage())}function saveToStorage(){localStorage.setItem("ranking_scores",JSON.stringify(rankingScores))}function renderRanking(){let t="";if(t+='<div id="ranking-modal" class="modal modal--ranking" style="display: flex;">',t+='<div class="modal__container">',t+="<h2>Ranking!</h2>",rankingScores.length>0){for(score of(t+="<ol>",rankingScores))t+=`<li>${score} pontos</li>`;t+="</ol>"}else t+="<h3>Você ainda não pontuou</h3>";t+='<button type="button" title="Fechar!" onclick="closeModal(\'#ranking-modal\')" >Fechar</button>',t+="</div>",t+="</div>",document.body.insertAdjacentHTML("beforeend",t)}rankingScores.length>10&&rankingScores.splice(-1,1);