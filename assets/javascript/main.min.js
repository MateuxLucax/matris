const numbers=["1","2","3","4","5","6","7","8","9","0"],comparisions=["!=",">","<",">=","<="],blocks=[...numbers,...comparisions];function isNumber(t){return numbers.includes(t)}function isComparision(t){return comparisions.includes(t)}function getType(t){return isNumber(t)?"number":isComparision(t)?"comparision":" "==t?"empty":"invalid"}function randomBlock(){return randomElement(blocks)}const operatorFunction={">":(t,i)=>t>i,"<":(t,i)=>t<i,">=":(t,i)=>t>=i,"<=":(t,i)=>t<=i,"=":(t,i)=>t==i,"!=":(t,i)=>t!=i};function isTrueExpression(t,i,e){return!!(isNumber(t)&&isComparision(i)&&isNumber(e))&&operatorFunction[i](Number(t),Number(e))}const directionToXOffset={ArrowLeft:-1,ArrowRight:1,ArrowDown:0};class Game{constructor(t,i){this.matrix=new Matrix(t,i),this.playerBlock={x:null,y:null},this.score=0,this.gameOverModalShown=!1}isPlayerBlockSettled(){if(0==this.playerBlock.y)return!0;const t={y:this.playerBlock.y-1,x:this.playerBlock.x};return!this.matrix.isAvailable(t)}isGameOver(){const t=this.matrix.height-1;for(let i=0;i<this.matrix.width;i++){if(!this.matrix.isAvailable({x:i,y:t})&&!this.matrix.isAvailable({x:i,y:t-1}))return!0}return!1}createNewPlayerBlock(){this.playerBlock={y:this.matrix.height-1,x:randomIntBetween(0,this.matrix.width)},this.matrix.setBlock(this.playerBlock,randomBlock())}updatePlayerBlock(t){const i=directionToXOffset[t];let e,r,o,s,a;o={y:(r={y:this.playerBlock.y,x:this.playerBlock.x}).y-1,x:r.x},a={y:(s={y:r.y,x:r.x+i}).y-1,x:s.x},e=this.matrix.isAvailable(a)?a:this.matrix.isAvailable(s)?s:this.matrix.isAvailable(o)?o:r,this.playerBlock=this.matrix.moveBlock(this.playerBlock,e)}start(){this.createNewPlayerBlock()}update(t){this.isGameOver()||(this.updatePlayerBlock(t),!this.isGameOver()&&this.isPlayerBlockSettled()&&(this.updateScore(),this.createNewPlayerBlock()))}makeBlocksFall(){let t={y:null,x:null};for(t.y=0;t.y<this.matrix.height-1;t.y++)for(t.x=0;t.x<this.matrix.width;t.x++)if(" "==this.matrix.getBlock(t)){const i={y:t.y+1,x:t.x};this.matrix.moveBlock(i,t)}}updateScore(){let t,i,e,r,o,s,a=0,l=0,n=this.matrix.copy();for(let l=0;l<n.height;l++)for(let h=1;h<n.width-1;h++)t={y:l,x:h-1},i={y:l,x:h},e={y:l,x:h+1},isTrueExpression(r=n.getBlock(t),o=n.getBlock(i),s=n.getBlock(e))&&(this.matrix.setBlock(t," "),this.matrix.setBlock(i," "),this.matrix.setBlock(e," "),a++);for(let a=1;a<n.height-1;a++)for(let h=0;h<n.width;h++)t={y:a+1,x:h},i={y:a,x:h},e={y:a-1,x:h},isTrueExpression(r=n.getBlock(t),o=n.getBlock(i),s=n.getBlock(e))&&(this.matrix.setBlock(t," "),this.matrix.setBlock(i," "),this.matrix.setBlock(e," "),l++);this.score+=1*a+2*l,(a>0||l>0)&&(this.makeBlocksFall(),this.updateScore())}showGameOverModal(){const t=`<div id="game-over-modal" class="modal">\n                      <div class="modal__container">\n                        <h2>Game over!</h2>\n                        <p>${this.score>0?`Você fez ${this.score} pontos`:"Você não pontuou"}</p>\n                        <button type="button" title="Jogar novamente!" onclick="window.location.reload();">Jogar novamente!</button>\n                      </div>\n                    </div>`;document.body.insertAdjacentHTML("beforeend",t),this.gameOverModalShown=!0}HTMLrendering(){let t,i,e="";e+='<table id="game-table">',e+=`<caption id ="game-score">Pontuação: ${this.score}</caption>`;for(let r=this.matrix.height-1;r>=0;r--){i=r==this.matrix.height-1?"danger":"",e+='<tr class="game-row">';for(let o=0;o<this.matrix.width;o++)e+=`<td class="game-cell ${i} ${getType(t=this.matrix.getBlock({y:r,x:o}))}">`,e+=t,e+="</td>";e+="</tr>"}return e+="</table>",this.isGameOver()&&!1===this.gameOverModalShown&&(this.showGameOverModal(),addScore(this.score)),e}}function randomIntBetween(t,i){return Math.floor(t+Math.random()*(i-t))}function randomElement(t){return t[randomIntBetween(0,t.length)]}class Matrix{constructor(t,i){this.height=t,this.width=i,this.matrix=null,this.initializeMatrix()}copy(){let t=new Matrix(this.height,this.width),i={y:null,x:null};for(i.y=0;i.y<t.height;i.y++)for(i.x=0;i.x<t.width;i.x++)t.setBlock(i,this.getBlock(i));return t}initializeMatrix(){this.matrix=new Array(this.height);for(let t=0;t<this.height;t++){this.matrix[t]=new Array(this.width);for(let i=0;i<this.width;i++)this.matrix[t][i]=" "}}isValid(t){return t.x>=0&&t.x<this.width&&t.y>=0&&t.y<this.height}getBlock(t){if(this.isValid(t))return this.matrix[t.y][t.x]}isAvailable(t){return" "==this.getBlock(t)}setBlock(t,i){this.isValid(t)&&(this.matrix[t.y][t.x]=i)}moveBlock(t,i){return this.isValid(t)&&this.isAvailable(i)?(this.setBlock(i,this.getBlock(t)),this.setBlock(t," "),i):t}HTMLrendering(){let t,i="";i+='<table id="game-matrix-table">';for(let e=this.height-1;e>=0;e--){i+='<tr class="game-matrix-row">';for(let r=0;r<this.width;r++)i+=`<td class="game-matrix-cell ${getType(t=this.getBlock({y:e,x:r}))}">`,i+=t,i+="</td>";i+="</tr>"}return i+="</table>"}}let rankingScores=JSON.parse(localStorage.getItem("ranking_scores"))||[];function addScore(t){t>0&&(rankingScores.push(t),rankingScores.sort(),saveToStorage())}function saveToStorage(){localStorage.setItem("ranking_scores",JSON.stringify(rankingScores))}function renderRanking(){let t="";if(t+='<div id="ranking-modal" class="modal modal--ranking" style="display: flex;">',t+='<div class="modal__container">',t+="<h2>Ranking!</h2>",rankingScores.length>0){for(score of(t+="<ol>",rankingScores))t+=`<li>${score} pontos</li>`;t+="</ol>"}else t+="<h3>Você ainda não pontuou</h3>";t+='<button type="button" title="Fechar!" onclick="closeModal(\'#ranking-modal\')" >Fechar</button>',t+="</div>",t+="</div>",document.body.insertAdjacentHTML("beforeend",t)}rankingScores.length>10&&rankingScores.splice(-1,1);